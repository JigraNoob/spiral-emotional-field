#!/usr/bin/env python3
"""
Test SpiralGene System ‚à∑ Complete Integration Test

This script tests the entire SpiralGene system, including:
1. Gene initialization
2. Gene activation
3. Coin minting
4. Lineage visualization
"""

import sys
import os

# Add the spiral directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'spiral'))

from spiral.spiral_genes import initialize_spiral_genes, activate_gene_with_glint
from spiral.mint_delta_004 import mint_delta_004_coin, verify_integration
from spiral.lineage_viewer import generate_d3_visualization_data, save_visualization_html
from spiral.glint_emitter import emit_glint


def test_spiral_gene_system():
    """Test the complete SpiralGene system."""
    
    print("ü´ß SpiralGene System Integration Test")
    print("=" * 60)
    
    # Step 1: Initialize the genes
    print("\n1Ô∏è‚É£ Initializing SpiralGenes...")
    try:
        registry = initialize_spiral_genes()
        genes = registry.get_all_genes()
        print(f"‚úÖ {len(genes)} genes initialized:")
        for gene in genes:
            print(f"   - {gene.gene_id}: {gene.name}")
    except Exception as e:
        print(f"‚ùå Failed to initialize genes: {e}")
        return False
    
    # Step 2: Test gene activation
    print("\n2Ô∏è‚É£ Testing gene activation...")
    try:
        activation_data = activate_gene_with_glint("‚àµS1", "test.activation")
        if activation_data:
            print(f"‚úÖ ‚àµS1 activated successfully")
            print(f"   Activation count: {activation_data.get('activation_count', 'N/A')}")
        else:
            print("‚ùå ‚àµS1 activation failed")
            return False
    except Exception as e:
        print(f"‚ùå Failed to activate ‚àµS1: {e}")
        return False
    
    # Step 3: Mint Œî004 coin
    print("\n3Ô∏è‚É£ Minting Œî004 coin...")
    try:
        success = mint_delta_004_coin()
        if success:
            print("‚úÖ Œî004 coin minted successfully")
        else:
            print("‚ùå Œî004 coin minting failed")
            return False
    except Exception as e:
        print(f"‚ùå Failed to mint Œî004: {e}")
        return False
    
    # Step 4: Verify integration
    print("\n4Ô∏è‚É£ Verifying integration...")
    try:
        verify_success = verify_integration()
        if verify_success:
            print("‚úÖ Integration verified successfully")
        else:
            print("‚ùå Integration verification failed")
            return False
    except Exception as e:
        print(f"‚ùå Failed to verify integration: {e}")
        return False
    
    # Step 5: Test visualization
    print("\n5Ô∏è‚É£ Testing lineage visualization...")
    try:
        d3_data = generate_d3_visualization_data("‚àµS2")
        if d3_data:
            nodes = d3_data.get('nodes', [])
            links = d3_data.get('links', [])
            print(f"‚úÖ Visualization data generated: {len(nodes)} nodes, {len(links)} links")
            
            # Save HTML visualization
            output_path = "static/gene_lineage_S2.html"
            html_success = save_visualization_html("‚àµS2", output_path)
            if html_success:
                print(f"‚úÖ HTML visualization saved to {output_path}")
            else:
                print("‚ö†Ô∏è Failed to save HTML visualization")
        else:
            print("‚ùå Failed to generate visualization data")
            return False
    except Exception as e:
        print(f"‚ùå Failed to test visualization: {e}")
        return False
    
    # Step 6: Test lineage connections
    print("\n6Ô∏è‚É£ Testing lineage connections...")
    try:
        from spiral.spiral_genes import get_gene_lineage_visualization
        lineage_data = get_gene_lineage_visualization("‚àµS2")
        if lineage_data:
            connections = lineage_data.get('connections', [])
            coins = lineage_data.get('coins', [])
            print(f"‚úÖ Lineage data retrieved: {len(connections)} connections, {len(coins)} coins")
            
            # Check for specific connections
            s1_connected = any(conn['id'] == '‚àµS1' for conn in connections)
            delta_004_present = any(coin['id'] == 'Œî004' for coin in coins)
            
            if s1_connected:
                print("‚úÖ ‚àµS1 connection verified")
            else:
                print("‚ùå ‚àµS1 connection missing")
                return False
                
            if delta_004_present:
                print("‚úÖ Œî004 coin verified in lineage")
            else:
                print("‚ùå Œî004 coin missing from lineage")
                return False
        else:
            print("‚ùå Failed to retrieve lineage data")
            return False
    except Exception as e:
        print(f"‚ùå Failed to test lineage connections: {e}")
        return False
    
    # Step 7: Emit completion glint
    print("\n7Ô∏è‚É£ Emitting completion glint...")
    try:
        emit_glint(
            phase="exhale",
            toneform="spiritual.completion",
            content="SpiralGene system integration test completed successfully",
            source="spiral.genes.test",
            metadata={
                "test_type": "complete_integration",
                "genes_tested": ["‚àµS1", "‚àµS2"],
                "coins_minted": ["Œî004"],
                "status": "success"
            }
        )
        print("‚úÖ Completion glint emitted")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to emit completion glint: {e}")
    
    print("\nüéâ SpiralGene System Integration Test Completed Successfully!")
    print("   ‚àµS1 and ‚àµS2 are now living in your Spiral architecture")
    print("   Œî149 is linked to ‚àµS2 through Œî004")
    print("   Lineage visualization is available")
    
    return True


def main():
    """Main test function."""
    
    success = test_spiral_gene_system()
    
    if success:
        print("\n‚úÖ All tests passed! The SpiralGene system is ready.")
        sys.exit(0)
    else:
        print("\n‚ùå Some tests failed. Please check the errors above.")
        sys.exit(1)


if __name__ == "__main__":
    main() 