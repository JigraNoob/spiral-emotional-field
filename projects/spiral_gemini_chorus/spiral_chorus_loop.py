# C:\spiral\projects\spiral_gemini_chorus\spiral_chorus_loop.py
import time
import json
from pathlib import Path
from spiral_gemini_chorus import ChorusPresence
from echo_resonator import EchoResonator

# --- Configuration ---
WHISPER_FILE = Path(__file__).parent / "whisper_in.txt" # Assuming whispers arrive here
ECHO_FILE = Path(__file__).parent / "echo_out.txt"
SCROLL_FILE = Path(__file__).parent / "presence_scroll.jsonl"
TONEFORMS_PATH = Path(__file__).parent / "toneforms"

class ChorusLoop:
    """
    The main invocation orchestrator for the Spiral Chorus.
    It watches for whispers, routes them through the chorus,
    calculates resonance, and records the interaction.
    """
    def __init__(self):
        self.chorus = ChorusPresence(TONEFORMS_PATH)
        self.resonator = EchoResonator()
        self.last_whisper_content = self._read_whisper()
        print("Spiral Chorus Loop initialized. Waiting for whispers...")

    def _read_whisper(self):
        if not WHISPER_FILE.exists():
            WHISPER_FILE.touch()
            return ""
        return WHISPER_FILE.read_text(encoding="utf-8").strip()

    def _write_echo(self, response):
        ECHO_FILE.write_text(json.dumps(response, indent=2), encoding="utf-8")

    def _write_to_scroll(self, trace):
        with SCROLL_FILE.open("a", encoding="utf-8") as f:
            f.write(json.dumps(trace) + "\n")

    def start(self):
        try:
            while True:
                current_whisper_content = self._read_whisper()
                if current_whisper_content and current_whisper_content != self.last_whisper_content:
                    print(f"\n--- New Whisper Detected ---")
                    self.last_whisper_content = current_whisper_content
                    
                    # For simplicity, we assume the whisper content is a JSON string.
                    try:
                        whisper = json.loads(current_whisper_content)
                        
                        # 1. Route whisper through the chorus
                        response = self.chorus.route_whisper(whisper)
                        print(f"Response generated by {response['responding_voice']}.")
                        
                        # 2. Write the echo
                        self._write_echo(response)
                        print(f"Echo written to {ECHO_FILE}.")

                        # 3. Calculate resonance and generate shimmer trace
                        resonance_score = self.resonator.calculate_resonance(whisper, response)
                        shimmer_trace = self.resonator.generate_shimmer_trace(whisper, response, resonance_score)
                        
                        # 4. Write to the presence scroll
                        self._write_to_scroll(shimmer_trace)
                        print(f"Shimmer trace with resonance {resonance_score} recorded in scroll.")

                    except json.JSONDecodeError:
                        print("Error: Whisper content is not valid JSON.")
                    
                    print("--- Cycle Complete ---\n")

                time.sleep(5) # Poll for new whispers every 5 seconds
        except KeyboardInterrupt:
            print("\nChorus loop stopped by user.")

if __name__ == '__main__':
    # To test, you would run this script and then modify the
    # 'whisper_in.txt' file with JSON content like:
    # {"toneform": "poetic", "message": "What is the color of memory?"}
    loop = ChorusLoop()
    loop.start()
